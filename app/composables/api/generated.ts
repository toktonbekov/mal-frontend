/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * mal.kg API
 * API –¥–ª—è –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π mal.kg
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/vue-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from "@tanstack/vue-query";

import { computed, unref } from "vue";
import type { MaybeRef } from "vue";

import type {
  GetAdsParams,
  GetFavoritesUserIdAdIdCheck200,
  GetFavoritesUserIdCount200,
  GetUsersIdFavorites200,
  GetUsersIdFavoritesParams,
  PostAdsBody,
  PostAuthLoginBody,
  PostAuthRefreshBody,
  PostAuthRegisterBody,
  PostAuthVerifyBody,
  PutAdsIdBody,
  User,
  UserUpdate,
} from "../../types/api";

import { customInstance } from "./mutator";
import type { ErrorType, BodyType } from "./mutator";
type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all ads with filters
 */
export const getAds = (
  params?: MaybeRef<GetAdsParams>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  params = unref(params);

  return customInstance<null>(
    {
      url: `http://localhost:3000/ads`,
      method: "GET",
      params: unref(params),
      signal,
    },
    options,
  );
};

export const getGetAdsQueryKey = (params?: MaybeRef<GetAdsParams>) => {
  return [
    "http:",
    "localhost:3000",
    "ads",
    ...(params ? [params] : []),
  ] as const;
};

export const getGetAdsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAds>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<GetAdsParams>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAds>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetAdsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAds>>> = ({
    signal,
  }) => getAds(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAds>>,
    TError,
    TData
  >;
};

export type GetAdsQueryResult = NonNullable<Awaited<ReturnType<typeof getAds>>>;
export type GetAdsQueryError = ErrorType<unknown>;

/**
 * @summary Get all ads with filters
 */

export function useGetAds<
  TData = Awaited<ReturnType<typeof getAds>>,
  TError = ErrorType<unknown>,
>(
  params?: MaybeRef<GetAdsParams>,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getAds>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAdsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

/**
 * @summary Create new ad
 */
export const postAds = (
  postAdsBody: MaybeRef<PostAdsBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  postAdsBody = unref(postAdsBody);
  const formData = new FormData();
  formData.append(`title`, postAdsBody.title);
  formData.append(`description`, postAdsBody.description);
  formData.append(`price`, postAdsBody.price.toString());
  formData.append(`category`, postAdsBody.category);
  formData.append(`location`, postAdsBody.location);
  if (postAdsBody.images !== undefined) {
    postAdsBody.images.forEach((value) => formData.append(`images`, value));
  }

  return customInstance<null>(
    {
      url: `http://localhost:3000/ads`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
      signal,
    },
    options,
  );
};

export const getPostAdsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAds>>,
    TError,
    { data: BodyType<PostAdsBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAds>>,
  TError,
  { data: BodyType<PostAdsBody> },
  TContext
> => {
  const mutationKey = ["postAds"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAds>>,
    { data: BodyType<PostAdsBody> }
  > = (props) => {
    const { data } = props ?? {};

    return postAds(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAdsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAds>>
>;
export type PostAdsMutationBody = BodyType<PostAdsBody>;
export type PostAdsMutationError = ErrorType<unknown>;

/**
 * @summary Create new ad
 */
export const usePostAds = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAds>>,
    TError,
    { data: BodyType<PostAdsBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postAds>>,
  TError,
  { data: BodyType<PostAdsBody> },
  TContext
> => {
  const mutationOptions = getPostAdsMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get specific ad
 */
export const getAdsId = (
  id: MaybeRef<unknown>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  id = unref(id);

  return customInstance<null>(
    { url: `http://localhost:3000/ads/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetAdsIdQueryKey = (id?: MaybeRef<unknown>) => {
  return ["http:", "localhost:3000", "ads", id] as const;
};

export const getGetAdsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdsId>>,
  TError = ErrorType<unknown>,
>(
  id: MaybeRef<unknown>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAdsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetAdsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdsId>>> = ({
    signal,
  }) => getAdsId(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAdsId>>, TError, TData>;
};

export type GetAdsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdsId>>
>;
export type GetAdsIdQueryError = ErrorType<unknown>;

/**
 * @summary Get specific ad
 */

export function useGetAdsId<
  TData = Awaited<ReturnType<typeof getAdsId>>,
  TError = ErrorType<unknown>,
>(
  id: MaybeRef<unknown>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAdsId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAdsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

/**
 * @summary Update ad
 */
export const putAdsId = (
  id: MaybeRef<unknown>,
  putAdsIdBody: MaybeRef<PutAdsIdBody>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id);
  putAdsIdBody = unref(putAdsIdBody);
  const formData = new FormData();
  if (putAdsIdBody.title !== undefined) {
    formData.append(`title`, putAdsIdBody.title);
  }
  if (putAdsIdBody.description !== undefined) {
    formData.append(`description`, putAdsIdBody.description);
  }
  if (putAdsIdBody.price !== undefined) {
    formData.append(`price`, putAdsIdBody.price.toString());
  }
  if (putAdsIdBody.images !== undefined) {
    putAdsIdBody.images.forEach((value) => formData.append(`images`, value));
  }

  return customInstance<null>(
    {
      url: `http://localhost:3000/ads/${id}`,
      method: "PUT",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};

export const getPutAdsIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAdsId>>,
    TError,
    { id: unknown; data: BodyType<PutAdsIdBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putAdsId>>,
  TError,
  { id: unknown; data: BodyType<PutAdsIdBody> },
  TContext
> => {
  const mutationKey = ["putAdsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putAdsId>>,
    { id: unknown; data: BodyType<PutAdsIdBody> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putAdsId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutAdsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putAdsId>>
>;
export type PutAdsIdMutationBody = BodyType<PutAdsIdBody>;
export type PutAdsIdMutationError = ErrorType<unknown>;

/**
 * @summary Update ad
 */
export const usePutAdsId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putAdsId>>,
    TError,
    { id: unknown; data: BodyType<PutAdsIdBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putAdsId>>,
  TError,
  { id: unknown; data: BodyType<PutAdsIdBody> },
  TContext
> => {
  const mutationOptions = getPutAdsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Delete ad
 */
export const deleteAdsId = (
  id: MaybeRef<unknown>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id);

  return customInstance<null>(
    { url: `http://localhost:3000/ads/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteAdsIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAdsId>>,
    TError,
    { id: unknown },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAdsId>>,
  TError,
  { id: unknown },
  TContext
> => {
  const mutationKey = ["deleteAdsId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAdsId>>,
    { id: unknown }
  > = (props) => {
    const { id } = props ?? {};

    return deleteAdsId(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteAdsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAdsId>>
>;

export type DeleteAdsIdMutationError = ErrorType<unknown>;

/**
 * @summary Delete ad
 */
export const useDeleteAdsId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAdsId>>,
    TError,
    { id: unknown },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteAdsId>>,
  TError,
  { id: unknown },
  TContext
> => {
  const mutationOptions = getDeleteAdsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Register a new user
 */
export const postAuthRegister = (
  postAuthRegisterBody: MaybeRef<PostAuthRegisterBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  postAuthRegisterBody = unref(postAuthRegisterBody);

  return customInstance<null>(
    {
      url: `http://localhost:3000/auth/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postAuthRegisterBody,
      signal,
    },
    options,
  );
};

export const getPostAuthRegisterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    { data: BodyType<PostAuthRegisterBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: BodyType<PostAuthRegisterBody> },
  TContext
> => {
  const mutationKey = ["postAuthRegister"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthRegister>>,
    { data: BodyType<PostAuthRegisterBody> }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRegister>>
>;
export type PostAuthRegisterMutationBody = BodyType<PostAuthRegisterBody>;
export type PostAuthRegisterMutationError = ErrorType<unknown>;

/**
 * @summary Register a new user
 */
export const usePostAuthRegister = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRegister>>,
    TError,
    { data: BodyType<PostAuthRegisterBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postAuthRegister>>,
  TError,
  { data: BodyType<PostAuthRegisterBody> },
  TContext
> => {
  const mutationOptions = getPostAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Verify phone number
 */
export const postAuthVerify = (
  postAuthVerifyBody: MaybeRef<PostAuthVerifyBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  postAuthVerifyBody = unref(postAuthVerifyBody);

  return customInstance<null>(
    {
      url: `http://localhost:3000/auth/verify`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postAuthVerifyBody,
      signal,
    },
    options,
  );
};

export const getPostAuthVerifyMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthVerify>>,
    TError,
    { data: BodyType<PostAuthVerifyBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthVerify>>,
  TError,
  { data: BodyType<PostAuthVerifyBody> },
  TContext
> => {
  const mutationKey = ["postAuthVerify"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthVerify>>,
    { data: BodyType<PostAuthVerifyBody> }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthVerify(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthVerifyMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthVerify>>
>;
export type PostAuthVerifyMutationBody = BodyType<PostAuthVerifyBody>;
export type PostAuthVerifyMutationError = ErrorType<unknown>;

/**
 * @summary Verify phone number
 */
export const usePostAuthVerify = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthVerify>>,
    TError,
    { data: BodyType<PostAuthVerifyBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postAuthVerify>>,
  TError,
  { data: BodyType<PostAuthVerifyBody> },
  TContext
> => {
  const mutationOptions = getPostAuthVerifyMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Login user
 */
export const postAuthLogin = (
  postAuthLoginBody: MaybeRef<PostAuthLoginBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  postAuthLoginBody = unref(postAuthLoginBody);

  return customInstance<null>(
    {
      url: `http://localhost:3000/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postAuthLoginBody,
      signal,
    },
    options,
  );
};

export const getPostAuthLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: BodyType<PostAuthLoginBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: BodyType<PostAuthLoginBody> },
  TContext
> => {
  const mutationKey = ["postAuthLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthLogin>>,
    { data: BodyType<PostAuthLoginBody> }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationBody = BodyType<PostAuthLoginBody>;
export type PostAuthLoginMutationError = ErrorType<unknown>;

/**
 * @summary Login user
 */
export const usePostAuthLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    { data: BodyType<PostAuthLoginBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postAuthLogin>>,
  TError,
  { data: BodyType<PostAuthLoginBody> },
  TContext
> => {
  const mutationOptions = getPostAuthLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Refresh access token
 */
export const postAuthRefresh = (
  postAuthRefreshBody: MaybeRef<PostAuthRefreshBody>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  postAuthRefreshBody = unref(postAuthRefreshBody);

  return customInstance<null>(
    {
      url: `http://localhost:3000/auth/refresh`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postAuthRefreshBody,
      signal,
    },
    options,
  );
};

export const getPostAuthRefreshMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    TError,
    { data: BodyType<PostAuthRefreshBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postAuthRefresh>>,
  TError,
  { data: BodyType<PostAuthRefreshBody> },
  TContext
> => {
  const mutationKey = ["postAuthRefresh"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    { data: BodyType<PostAuthRefreshBody> }
  > = (props) => {
    const { data } = props ?? {};

    return postAuthRefresh(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostAuthRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthRefresh>>
>;
export type PostAuthRefreshMutationBody = BodyType<PostAuthRefreshBody>;
export type PostAuthRefreshMutationError = ErrorType<unknown>;

/**
 * @summary Refresh access token
 */
export const usePostAuthRefresh = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postAuthRefresh>>,
    TError,
    { data: BodyType<PostAuthRefreshBody> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postAuthRefresh>>,
  TError,
  { data: BodyType<PostAuthRefreshBody> },
  TContext
> => {
  const mutationOptions = getPostAuthRefreshMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 */
export const postFavoritesUserIdAdId = (
  userId: MaybeRef<string>,
  adId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  userId = unref(userId);
  adId = unref(adId);

  return customInstance<null>(
    {
      url: `http://localhost:3000/favorites/${userId}/${adId}`,
      method: "POST",
      signal,
    },
    options,
  );
};

export const getPostFavoritesUserIdAdIdMutationOptions = <
  TError = ErrorType<null | null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFavoritesUserIdAdId>>,
    TError,
    { userId: string; adId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postFavoritesUserIdAdId>>,
  TError,
  { userId: string; adId: string },
  TContext
> => {
  const mutationKey = ["postFavoritesUserIdAdId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postFavoritesUserIdAdId>>,
    { userId: string; adId: string }
  > = (props) => {
    const { userId, adId } = props ?? {};

    return postFavoritesUserIdAdId(userId, adId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostFavoritesUserIdAdIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postFavoritesUserIdAdId>>
>;

export type PostFavoritesUserIdAdIdMutationError = ErrorType<
  null | null | null | null
>;

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 */
export const usePostFavoritesUserIdAdId = <
  TError = ErrorType<null | null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postFavoritesUserIdAdId>>,
    TError,
    { userId: string; adId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postFavoritesUserIdAdId>>,
  TError,
  { userId: string; adId: string },
  TContext
> => {
  const mutationOptions = getPostFavoritesUserIdAdIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
 */
export const deleteFavoritesUserIdAdId = (
  userId: MaybeRef<string>,
  adId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  userId = unref(userId);
  adId = unref(adId);

  return customInstance<null>(
    {
      url: `http://localhost:3000/favorites/${userId}/${adId}`,
      method: "DELETE",
    },
    options,
  );
};

export const getDeleteFavoritesUserIdAdIdMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFavoritesUserIdAdId>>,
    TError,
    { userId: string; adId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFavoritesUserIdAdId>>,
  TError,
  { userId: string; adId: string },
  TContext
> => {
  const mutationKey = ["deleteFavoritesUserIdAdId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteFavoritesUserIdAdId>>,
    { userId: string; adId: string }
  > = (props) => {
    const { userId, adId } = props ?? {};

    return deleteFavoritesUserIdAdId(userId, adId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteFavoritesUserIdAdIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteFavoritesUserIdAdId>>
>;

export type DeleteFavoritesUserIdAdIdMutationError = ErrorType<null | null>;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
 */
export const useDeleteFavoritesUserIdAdId = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFavoritesUserIdAdId>>,
    TError,
    { userId: string; adId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteFavoritesUserIdAdId>>,
  TError,
  { userId: string; adId: string },
  TContext
> => {
  const mutationOptions = getDeleteFavoritesUserIdAdIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
 */
export const getFavoritesUserIdAdIdCheck = (
  userId: MaybeRef<string>,
  adId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  userId = unref(userId);
  adId = unref(adId);

  return customInstance<GetFavoritesUserIdAdIdCheck200>(
    {
      url: `http://localhost:3000/favorites/${userId}/${adId}/check`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetFavoritesUserIdAdIdCheckQueryKey = (
  userId?: MaybeRef<string>,
  adId?: MaybeRef<string>,
) => {
  return [
    "http:",
    "localhost:3000",
    "favorites",
    userId,
    adId,
    "check",
  ] as const;
};

export const getGetFavoritesUserIdAdIdCheckQueryOptions = <
  TData = Awaited<ReturnType<typeof getFavoritesUserIdAdIdCheck>>,
  TError = ErrorType<null>,
>(
  userId: MaybeRef<string>,
  adId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFavoritesUserIdAdIdCheck>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetFavoritesUserIdAdIdCheckQueryKey(userId, adId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFavoritesUserIdAdIdCheck>>
  > = ({ signal }) =>
    getFavoritesUserIdAdIdCheck(userId, adId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(userId) && unref(adId))),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getFavoritesUserIdAdIdCheck>>,
    TError,
    TData
  >;
};

export type GetFavoritesUserIdAdIdCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFavoritesUserIdAdIdCheck>>
>;
export type GetFavoritesUserIdAdIdCheckQueryError = ErrorType<null>;

/**
 * @summary –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
 */

export function useGetFavoritesUserIdAdIdCheck<
  TData = Awaited<ReturnType<typeof getFavoritesUserIdAdIdCheck>>,
  TError = ErrorType<null>,
>(
  userId: MaybeRef<string>,
  adId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFavoritesUserIdAdIdCheck>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetFavoritesUserIdAdIdCheckQueryOptions(
    userId,
    adId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

/**
 * @summary –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const deleteFavoritesUserId = (
  userId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  userId = unref(userId);

  return customInstance<null>(
    { url: `http://localhost:3000/favorites/${userId}`, method: "DELETE" },
    options,
  );
};

export const getDeleteFavoritesUserIdMutationOptions = <
  TError = ErrorType<null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFavoritesUserId>>,
    TError,
    { userId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFavoritesUserId>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationKey = ["deleteFavoritesUserId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteFavoritesUserId>>,
    { userId: string }
  > = (props) => {
    const { userId } = props ?? {};

    return deleteFavoritesUserId(userId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteFavoritesUserIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteFavoritesUserId>>
>;

export type DeleteFavoritesUserIdMutationError = ErrorType<null>;

/**
 * @summary –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const useDeleteFavoritesUserId = <
  TError = ErrorType<null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFavoritesUserId>>,
    TError,
    { userId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteFavoritesUserId>>,
  TError,
  { userId: string },
  TContext
> => {
  const mutationOptions = getDeleteFavoritesUserIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 */
export const getFavoritesUserIdCount = (
  userId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  userId = unref(userId);

  return customInstance<GetFavoritesUserIdCount200>(
    {
      url: `http://localhost:3000/favorites/${userId}/count`,
      method: "GET",
      signal,
    },
    options,
  );
};

export const getGetFavoritesUserIdCountQueryKey = (
  userId?: MaybeRef<string>,
) => {
  return ["http:", "localhost:3000", "favorites", userId, "count"] as const;
};

export const getGetFavoritesUserIdCountQueryOptions = <
  TData = Awaited<ReturnType<typeof getFavoritesUserIdCount>>,
  TError = ErrorType<null>,
>(
  userId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFavoritesUserIdCount>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetFavoritesUserIdCountQueryKey(userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFavoritesUserIdCount>>
  > = ({ signal }) => getFavoritesUserIdCount(userId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(userId)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getFavoritesUserIdCount>>,
    TError,
    TData
  >;
};

export type GetFavoritesUserIdCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFavoritesUserIdCount>>
>;
export type GetFavoritesUserIdCountQueryError = ErrorType<null>;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
 */

export function useGetFavoritesUserIdCount<
  TData = Awaited<ReturnType<typeof getFavoritesUserIdCount>>,
  TError = ErrorType<null>,
>(
  userId: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFavoritesUserIdCount>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetFavoritesUserIdCountQueryOptions(userId, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUsersId = (
  id: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  id = unref(id);

  return customInstance<User>(
    { url: `http://localhost:3000/users/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetUsersIdQueryKey = (id?: MaybeRef<string>) => {
  return ["http:", "localhost:3000", "users", id] as const;
};

export const getGetUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = ErrorType<null>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetUsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersId>>> = ({
    signal,
  }) => getUsersId(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>;
};

export type GetUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersId>>
>;
export type GetUsersIdQueryError = ErrorType<null>;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetUsersId<
  TData = Awaited<ReturnType<typeof getUsersId>>,
  TError = ErrorType<null>,
>(
  id: MaybeRef<string>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const putUsersId = (
  id: MaybeRef<string>,
  userUpdate: MaybeRef<UserUpdate>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id);
  userUpdate = unref(userUpdate);

  return customInstance<User>(
    {
      url: `http://localhost:3000/users/${id}`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: userUpdate,
    },
    options,
  );
};

export const getPutUsersIdMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putUsersId>>,
    TError,
    { id: string; data: BodyType<UserUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putUsersId>>,
  TError,
  { id: string; data: BodyType<UserUpdate> },
  TContext
> => {
  const mutationKey = ["putUsersId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putUsersId>>,
    { id: string; data: BodyType<UserUpdate> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putUsersId(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putUsersId>>
>;
export type PutUsersIdMutationBody = BodyType<UserUpdate>;
export type PutUsersIdMutationError = ErrorType<null | null>;

/**
 * @summary –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const usePutUsersId = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putUsersId>>,
    TError,
    { id: string; data: BodyType<UserUpdate> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putUsersId>>,
  TError,
  { id: string; data: BodyType<UserUpdate> },
  TContext
> => {
  const mutationOptions = getPutUsersIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUsersIdFavorites = (
  id: MaybeRef<string>,
  params?: MaybeRef<GetUsersIdFavoritesParams>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  id = unref(id);
  params = unref(params);

  return customInstance<GetUsersIdFavorites200>(
    {
      url: `http://localhost:3000/users/${id}/favorites`,
      method: "GET",
      params: unref(params),
      signal,
    },
    options,
  );
};

export const getGetUsersIdFavoritesQueryKey = (
  id?: MaybeRef<string>,
  params?: MaybeRef<GetUsersIdFavoritesParams>,
) => {
  return [
    "http:",
    "localhost:3000",
    "users",
    id,
    "favorites",
    ...(params ? [params] : []),
  ] as const;
};

export const getGetUsersIdFavoritesQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersIdFavorites>>,
  TError = ErrorType<null>,
>(
  id: MaybeRef<string>,
  params?: MaybeRef<GetUsersIdFavoritesParams>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersIdFavorites>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = getGetUsersIdFavoritesQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersIdFavorites>>
  > = ({ signal }) => getUsersIdFavorites(id, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersIdFavorites>>,
    TError,
    TData
  >;
};

export type GetUsersIdFavoritesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersIdFavorites>>
>;
export type GetUsersIdFavoritesQueryError = ErrorType<null>;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

export function useGetUsersIdFavorites<
  TData = Awaited<ReturnType<typeof getUsersIdFavorites>>,
  TError = ErrorType<null>,
>(
  id: MaybeRef<string>,
  params?: MaybeRef<GetUsersIdFavoritesParams>,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersIdFavorites>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersIdFavoritesQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
}

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 */
export const postUsersIdFavoritesAdId = (
  id: MaybeRef<string>,
  adId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  id = unref(id);
  adId = unref(adId);

  return customInstance<null>(
    {
      url: `http://localhost:3000/users/${id}/favorites/${adId}`,
      method: "POST",
      signal,
    },
    options,
  );
};

export const getPostUsersIdFavoritesAdIdMutationOptions = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersIdFavoritesAdId>>,
    TError,
    { id: string; adId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersIdFavoritesAdId>>,
  TError,
  { id: string; adId: string },
  TContext
> => {
  const mutationKey = ["postUsersIdFavoritesAdId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersIdFavoritesAdId>>,
    { id: string; adId: string }
  > = (props) => {
    const { id, adId } = props ?? {};

    return postUsersIdFavoritesAdId(id, adId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersIdFavoritesAdIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersIdFavoritesAdId>>
>;

export type PostUsersIdFavoritesAdIdMutationError = ErrorType<
  null | null | null
>;

/**
 * @summary –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 */
export const usePostUsersIdFavoritesAdId = <
  TError = ErrorType<null | null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersIdFavoritesAdId>>,
    TError,
    { id: string; adId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postUsersIdFavoritesAdId>>,
  TError,
  { id: string; adId: string },
  TContext
> => {
  const mutationOptions = getPostUsersIdFavoritesAdIdMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
 */
export const deleteUsersIdFavoritesAdId = (
  id: MaybeRef<string>,
  adId: MaybeRef<string>,
  options?: SecondParameter<typeof customInstance>,
) => {
  id = unref(id);
  adId = unref(adId);

  return customInstance<null>(
    {
      url: `http://localhost:3000/users/${id}/favorites/${adId}`,
      method: "DELETE",
    },
    options,
  );
};

export const getDeleteUsersIdFavoritesAdIdMutationOptions = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsersIdFavoritesAdId>>,
    TError,
    { id: string; adId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteUsersIdFavoritesAdId>>,
  TError,
  { id: string; adId: string },
  TContext
> => {
  const mutationKey = ["deleteUsersIdFavoritesAdId"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUsersIdFavoritesAdId>>,
    { id: string; adId: string }
  > = (props) => {
    const { id, adId } = props ?? {};

    return deleteUsersIdFavoritesAdId(id, adId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteUsersIdFavoritesAdIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUsersIdFavoritesAdId>>
>;

export type DeleteUsersIdFavoritesAdIdMutationError = ErrorType<null | null>;

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
 */
export const useDeleteUsersIdFavoritesAdId = <
  TError = ErrorType<null | null>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteUsersIdFavoritesAdId>>,
    TError,
    { id: string; adId: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteUsersIdFavoritesAdId>>,
  TError,
  { id: string; adId: string },
  TContext
> => {
  const mutationOptions = getDeleteUsersIdFavoritesAdIdMutationOptions(options);

  return useMutation(mutationOptions);
};
